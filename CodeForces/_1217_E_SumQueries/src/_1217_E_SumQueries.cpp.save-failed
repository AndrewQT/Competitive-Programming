#include <bits/stdc++.h>

using namespace std;

struct Node{
    int l, r;
    vector<int> b, s;
};

int N, Q, K = 11;
Node seg[200005];
int arr[200005], msk[200005];

int getmsk(int n){
    int ret = 0;
    for(int k = 0; k<K; k++){
        if(n%10){
            ret |= (1<<k);
        }
        n/=10;
    }
    return ret;
}

void pu(int idx){
    for(int k = 0; k<K; k++){
        seg[idx].b[k] = seg[2*idx].b[k];
        seg[idx].s[k] = seg[2*idx].s[k];
        if(seg[2*idx+1].b[k] >= seg[idx].b[k]){
            seg[idx].s[k] = seg[idx].b[k];
            seg[idx].b[k] = seg[2*idx+1].b[k];
        }
        else if(seg[2*idx+1].b[k] > seg[idx].s[k]){
            seg[idx].s[k] = seg[2*idx+1].b[k];
        }
        if(seg[2*idx+1].s[k] > seg[idx].s[k]){
            seg[idx].s[k] = seg[2*idx+1].s[k];
        }
    }
}

void build(int l, int r, int idx){
    seg[idx].l =l, seg[idx].r = r;
    seg[idx].b.resize(K, INT_MAX/2-1), seg[idx].s.resize(K, INT_MAX/2-1);
    if(l == r){
        for(int k = 0; k<K; k++){
            if((msk[l]>>k)&1){
                seg[idx].b[k] = arr[l];
            }
        }
        return;
    }
    int mid = l + r >> 1;
    build(l, mid, 2*idx);
    build(mid+1, r, 2*idx+1);
    pu(idx);
}

void upd(int p, int idx){
    if(seg[idx].l == seg[idx].r){
        for(int k = 0; k<K; k++){
            if((msk[p]>>k)&1){
                seg[idx].b[k] = arr[p];
            }
            else{
                seg[idx].b[k] = INT_MAX/2-1;
            }
        }
        return;
    }
    if(p <= seg[idx].l+seg[idx].r>>1){
        upd(p, 2*idx);
    }
    else{
        upd(p, 2*idx+1);
    }
    pu(idx);
}

int main(){
    cin.sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> N >> Q;
    for(int i =1 ;i<=N; i++){
        cin >> arr[i];
        msk[i] = getmsk(arr[i]);
    }

}
